clc; clear; close all;

% Parameters
N = 256;                    % Number of subcarriers
num_ofdm_symbols = 1000;    % Number of OFDM symbols
clip_level = 0.3;           % Clipping threshold (relative to RMS)
mod_orders = [4, 16, 64, 256];  % QPSK, 16-QAM, 64-QAM, 256-QAM
SNR_dB = 0:2:20;            % SNR range (dB)
filter_order = 32;          % FIR filter order (improved filtering)
num_candidates = 4;         % SLM candidates
num_subblocks = 4;          % PTS subblocks

% FIR filter design
b = fir1(filter_order, 0.2); % Low-pass FIR filter

% Initialize results
PAPR_before_clipping = zeros(length(mod_orders), 1);
PAPR_after_clipping = zeros(length(mod_orders), 1);
PAPR_after_filtering = zeros(length(mod_orders), 1);
PAPR_after_SLM = zeros(length(mod_orders), 1);
PAPR_after_PTS = zeros(length(mod_orders), 1);
BER_orig = zeros(length(mod_orders), length(SNR_dB));
BER_clip = zeros(length(mod_orders), length(SNR_dB));

for i = 1:length(mod_orders)
    M = mod_orders(i);
    data = randi([0, M-1], N, num_ofdm_symbols);
    x_mod = qammod(data, M, 'UnitAveragePower', true, 'InputType', 'integer');
    x_time = ifft(x_mod, N, 1);
    
    % PAPR Calculation (Original)
    PAPR_before_clipping(i) = mean(10*log10(max(abs(x_time).^2, [], 1) ./ mean(abs(x_time).^2, 1)));
    
    % Clipping
    clip_amp = clip_level * sqrt(mean(abs(x_time(:)).^2));
    x_clipped = x_time;
    clip_idx = abs(x_clipped) > clip_amp;
    x_clipped(clip_idx) = clip_amp .* exp(1j * angle(x_clipped(clip_idx)));
    PAPR_after_clipping(i) = mean(10*log10(max(abs(x_clipped).^2, [], 1) ./ mean(abs(x_clipped).^2, 1)));
    
    % Filtering (FIR filter)
    x_filtered = filter(b, 1, x_clipped, [], 1);
    PAPR_after_filtering(i) = mean(10*log10(max(abs(x_filtered).^2, [], 1) ./ mean(abs(x_filtered).^2, 1)));
    
    % SLM Method
    min_PAPR_SLM = inf(1, num_ofdm_symbols);
    for k = 1:num_ofdm_symbols
        for j = 1:num_candidates
            phase_shift = exp(1j * 2*pi*rand(N, 1));
            x_mod_slm = x_mod(:, k) .* phase_shift;
            x_time_slm = ifft(x_mod_slm, N);
            min_PAPR_SLM(k) = min(min_PAPR_SLM(k), 10*log10(max(abs(x_time_slm).^2) / mean(abs(x_time_slm).^2)));
        end
    end
    PAPR_after_SLM(i) = mean(min_PAPR_SLM);
    
    % PTS Method
    subblock_size = N / num_subblocks;
    min_PAPR_PTS = inf(1, num_ofdm_symbols);
    for k = 1:num_ofdm_symbols
        for p = 1:50  % Increased phase trials
            phases = exp(1j * 2*pi*rand(num_subblocks, 1));
            x_pts = zeros(N, 1);
            for sb = 1:num_subblocks
                idx = (sb-1)*subblock_size + 1 : sb*subblock_size;
                x_pts(idx) = x_mod(idx, k) .* phases(sb);
            end
            x_time_pts = ifft(x_pts, N);
            min_PAPR_PTS(k) = min(min_PAPR_PTS(k), 10*log10(max(abs(x_time_pts).^2) / mean(abs(x_time_pts).^2)));
        end
    end
    PAPR_after_PTS(i) = mean(min_PAPR_PTS);
    
    % BER Calculation
    for snr_idx = 1:length(SNR_dB)
        rx_orig = awgn(x_time, SNR_dB(snr_idx), 'measured');
        rx_freq_orig = fft(rx_orig, N, 1);
        data_rx_orig = qamdemod(rx_freq_orig, M, 'UnitAveragePower', true, 'OutputType', 'integer');
        BER_orig(i, snr_idx) = sum(data(:) ~= data_rx_orig(:)) / numel(data);
        
        rx_clip = awgn(x_clipped, SNR_dB(snr_idx), 'measured');
        rx_freq_clip = fft(rx_clip, N, 1);
        data_rx_clip = qamdemod(rx_freq_clip, M, 'UnitAveragePower', true, 'OutputType', 'integer');
        BER_clip(i, snr_idx) = sum(data(:) ~= data_rx_clip(:)) / numel(data);
    end
end

% Plot PAPR Reduction Results
figure;
bar([PAPR_before_clipping, PAPR_after_clipping, PAPR_after_filtering, PAPR_after_SLM, PAPR_after_PTS]);
set(gca, 'XTickLabel', {'QPSK', '16-QAM', '64-QAM', '256-QAM'});
title('PAPR Reduction Techniques');
xlabel('Modulation Scheme');
ylabel('PAPR (dB)');
legend('Original', 'Clipped', 'Filtered', 'SLM', 'PTS');
grid on;

% Plot BER vs SNR
figure;
colors = lines(length(mod_orders));
for i = 1:length(mod_orders)
    semilogy(SNR_dB, BER_orig(i, :), '-o', 'Color', colors(i, :), 'LineWidth', 2); hold on;
    semilogy(SNR_dB, BER_clip(i, :), '--x', 'Color', colors(i, :), 'LineWidth', 2);
end
grid on;
title('BER vs SNR');
xlabel('SNR (dB)');
ylabel('BER');
legend([strcat({'QPSK', '16-QAM', '64-QAM', '256-QAM'}, ' Orig'), ...
        strcat({'QPSK', '16-QAM', '64-QAM', '256-QAM'}, ' Clip')]);




%Clipping and Filtering
clc; clear; close all;

% Parameters
N = 256;                    % Number of subcarriers
num_ofdm_symbols = 1000;    % Number of OFDM symbols
clip_level = 0.3;           % Clipping threshold (relative to RMS)
mod_orders = [4, 16, 64, 256];  % QPSK, 16-QAM, 64-QAM, 256-QAM
SNR_dB = 0:2:20;            % SNR range (dB)
filter_order = 32;          % FIR filter order (improved filtering)

% FIR filter design
b = fir1(filter_order, 0.2); % Low-pass FIR filter

% Initialize results
PAPR_before_clipping = zeros(length(mod_orders), 1);
PAPR_after_clipping = zeros(length(mod_orders), 1);
PAPR_after_filtering = zeros(length(mod_orders), 1);

for i = 1:length(mod_orders)
    M = mod_orders(i);
    data = randi([0, M-1], N, num_ofdm_symbols);
    x_mod = qammod(data, M, 'UnitAveragePower', true, 'InputType', 'integer');
    x_time = ifft(x_mod, N, 1);
    
    % PAPR Calculation (Original)
    PAPR_before_clipping(i) = mean(10*log10(max(abs(x_time).^2, [], 1) ./ mean(abs(x_time).^2, 1)));
    
    % Clipping
    clip_amp = clip_level * sqrt(mean(abs(x_time(:)).^2));
    x_clipped = x_time;
    clip_idx = abs(x_clipped) > clip_amp;
    x_clipped(clip_idx) = clip_amp .* exp(1j * angle(x_clipped(clip_idx)));
    PAPR_after_clipping(i) = mean(10*log10(max(abs(x_clipped).^2, [], 1) ./ mean(abs(x_clipped).^2, 1)));
    
    % Filtering (FIR filter)
    x_filtered = filter(b, 1, x_clipped, [], 1);
    PAPR_after_filtering(i) = mean(10*log10(max(abs(x_filtered).^2, [], 1) ./ mean(abs(x_filtered).^2, 1)));
end

% Plot PAPR Reduction Results
figure;
bar([PAPR_before_clipping, PAPR_after_clipping, PAPR_after_filtering]);
set(gca, 'XTickLabel', {'QPSK', '16-QAM', '64-QAM', '256-QAM'});
title('PAPR Reduction: Clipping and Filtering');
xlabel('Modulation Scheme');
ylabel('PAPR (dB)');
legend('Original', 'Clipped', 'Filtered');
grid on;





%SLM :
clc; clear; close all;

% Parameters
N = 256;                    % Number of subcarriers
num_ofdm_symbols = 1000;    % Number of OFDM symbols
mod_orders = [4, 16, 64, 256];  % QPSK, 16-QAM, 64-QAM, 256-QAM
num_candidates = 4;         % Number of SLM candidates

% Initialize results
PAPR_before_SLM = zeros(length(mod_orders), 1);
PAPR_after_SLM = zeros(length(mod_orders), 1);

for i = 1:length(mod_orders)
    M = mod_orders(i);
    data = randi([0, M-1], N, num_ofdm_symbols);
    x_mod = qammod(data, M, 'UnitAveragePower', true, 'InputType', 'integer');
    x_time = ifft(x_mod, N, 1);
    
    % PAPR Calculation (Original)
    PAPR_before_SLM(i) = mean(10*log10(max(abs(x_time).^2, [], 1) ./ mean(abs(x_time).^2, 1)));
    
    % SLM Processing
    min_PAPR_SLM = zeros(1, num_ofdm_symbols);
    for k = 1:num_ofdm_symbols
        candidates = zeros(1, num_candidates);
        for j = 1:num_candidates
            phase_shift = exp(1j * 2 * pi * rand(N, 1)); % Random phase sequence
            x_mod_slm = x_mod(:, k) .* phase_shift;
            x_time_slm = ifft(x_mod_slm, N);
            candidates(j) = 10*log10(max(abs(x_time_slm).^2) / mean(abs(x_time_slm).^2));
        end
        min_PAPR_SLM(k) = min(candidates);
    end
    PAPR_after_SLM(i) = mean(min_PAPR_SLM);
end

% Plot PAPR Reduction Results
figure;
bar([PAPR_before_SLM, PAPR_after_SLM]);
set(gca, 'XTickLabel', {'QPSK', '16-QAM', '64-QAM', '256-QAM'});
title('PAPR Reduction Using Selective Mapping (SLM)');
xlabel('Modulation Scheme');
ylabel('PAPR (dB)');
legend('Original', 'After SLM');
grid on;


%PTS:
clc; clear; close all;

% Parameters
N = 256;                    % Number of subcarriers
num_ofdm_symbols = 1000;    % Number of OFDM symbols
mod_orders = [4, 16, 64, 256];  % QPSK, 16-QAM, 64-QAM, 256-QAM
num_subblocks = 4;          % Number of PTS sub-blocks
num_phase_trials = 50;      % Number of phase trials

% Initialize results
PAPR_before_PTS = zeros(length(mod_orders), 1);
PAPR_after_PTS = zeros(length(mod_orders), 1);

for i = 1:length(mod_orders)
    M = mod_orders(i);
    data = randi([0, M-1], N, num_ofdm_symbols);
    x_mod = qammod(data, M, 'UnitAveragePower', true, 'InputType', 'integer');
    x_time = ifft(x_mod, N, 1);
    
    % PAPR Calculation (Original)
    PAPR_before_PTS(i) = mean(10*log10(max(abs(x_time).^2, [], 1) ./ mean(abs(x_time).^2, 1)));
    
    % PTS Processing
    subblock_size = N / num_subblocks;
    min_PAPR_PTS = zeros(1, num_ofdm_symbols);
    for k = 1:num_ofdm_symbols
        best_papr = inf;
        for p = 1:num_phase_trials
            phases = exp(1j * 2 * pi * rand(num_subblocks, 1));
            x_pts = zeros(N, 1);
            for sb = 1:num_subblocks
                idx = (sb-1)*subblock_size + 1 : sb*subblock_size;
                x_pts(idx) = x_mod(idx, k) .* phases(sb);
            end
            x_time_pts = ifft(x_pts, N);
            papr = 10*log10(max(abs(x_time_pts).^2) / mean(abs(x_time_pts).^2));
            best_papr = min(best_papr, papr);
        end
        min_PAPR_PTS(k) = best_papr;
    end
    PAPR_after_PTS(i) = mean(min_PAPR_PTS);
end



%BER Performance Analysis

clc; clear; close all;

% Parameters
N = 256;                    % Number of subcarriers
num_ofdm_symbols = 1000;    % Number of OFDM symbols
mod_orders = [4, 16, 64, 256];  % QPSK, 16-QAM, 64-QAM, 256-QAM
SNR_dB = 0:2:20;            % SNR range (dB)

% Initialize results
BER_orig = zeros(length(mod_orders), length(SNR_dB));
BER_clip = zeros(length(mod_orders), length(SNR_dB));
BER_SLM = zeros(length(mod_orders), length(SNR_dB));
BER_PTS = zeros(length(mod_orders), length(SNR_dB));

for i = 1:length(mod_orders)
    M = mod_orders(i);
    data = randi([0, M-1], N, num_ofdm_symbols);
    x_mod = qammod(data, M, 'UnitAveragePower', true, 'InputType', 'integer');
    x_time = ifft(x_mod, N, 1);
    
    for snr_idx = 1:length(SNR_dB)
        % Original signal
        tx_orig = x_time;
        rx_orig = awgn(tx_orig, SNR_dB(snr_idx), 'measured');
        rx_freq_orig = fft(rx_orig, N, 1);
        data_rx_orig = qamdemod(rx_freq_orig, M, 'UnitAveragePower', true, 'OutputType', 'integer');
        BER_orig(i, snr_idx) = sum(data(:) ~= data_rx_orig(:)) / numel(data);
        
        % Clipped signal
        clip_level = 0.3 * sqrt(mean(abs(x_time(:)).^2));
        x_clipped = min(abs(x_time), clip_level) .* exp(1j * angle(x_time));
        rx_clip = awgn(x_clipped, SNR_dB(snr_idx), 'measured');
        rx_freq_clip = fft(rx_clip, N, 1);
        data_rx_clip = qamdemod(rx_freq_clip, M, 'UnitAveragePower', true, 'OutputType', 'integer');
        BER_clip(i, snr_idx) = sum(data(:) ~= data_rx_clip(:)) / numel(data);
        
        % SLM processed signal
        phase_shift = exp(1j * 2 * pi * rand(N, 1));
        x_slm = ifft(x_mod .* phase_shift, N);
        rx_slm = awgn(x_slm, SNR_dB(snr_idx), 'measured');
        rx_freq_slm = fft(rx_slm, N, 1);
        data_rx_slm = qamdemod(rx_freq_slm, M, 'UnitAveragePower', true, 'OutputType', 'integer');
        BER_SLM(i, snr_idx) = sum(data(:) ~= data_rx_slm(:)) / numel(data);
        
        % PTS processed signal
        num_subblocks = 4;
        subblock_size = N / num_subblocks;
        phases = exp(1j * 2 * pi * rand(num_subblocks, 1));
        x_pts = zeros(N, num_ofdm_symbols);
        for sb = 1:num_subblocks
            idx = (sb-1)*subblock_size + 1 : sb*subblock_size;
            x_pts(idx, :) = x_mod(idx, :) .* phases(sb);
        end
        x_time_pts = ifft(x_pts, N, 1);
        rx_pts = awgn(x_time_pts, SNR_dB(snr_idx), 'measured');
        rx_freq_pts = fft(rx_pts, N, 1);
        data_rx_pts = qamdemod(rx_freq_pts, M, 'UnitAveragePower', true, 'OutputType', 'integer');
        BER_PTS(i, snr_idx) = sum(data(:) ~= data_rx_pts(:)) / numel(data);
    end
end

% Plot BER Performance
figure;
colors = lines(length(mod_orders));
for i = 1:length(mod_orders)
    semilogy(SNR_dB, BER_orig(i, :), '-', 'Color', colors(i, :), 'LineWidth', 2); hold on;
    semilogy(SNR_dB, BER_clip(i, :), '--', 'Color', colors(i, :), 'LineWidth', 2);
    semilogy(SNR_dB, BER_SLM(i, :), '-.', 'Color', colors(i, :), 'LineWidth', 2);
    semilogy(SNR_dB, BER_PTS(i, :), ':', 'Color', colors(i, :), 'LineWidth', 2);
end

grid on;
title('BER Performance Analysis');
xlabel('SNR (dB)');
ylabel('BER');
legend({'QPSK - Orig', 'QPSK - Clip', 'QPSK - SLM', 'QPSK - PTS', ...
        '16-QAM - Orig', '16-QAM - Clip', '16-QAM - SLM', '16-QAM - PTS', ...
        '64-QAM - Orig', '64-QAM - Clip', '64-QAM - SLM', '64-QAM - PTS', ...
        '256-QAM - Orig', '256-QAM - Clip', '256-QAM - SLM', '256-QAM - PTS'}, 'Location', 'southwest');

% Plot PAPR Reduction Results
figure;
bar([PAPR_before_PTS, PAPR_after_PTS]);
set(gca, 'XTickLabel', {'QPSK', '16-QAM', '64-QAM', '256-QAM'});
title('PAPR Reduction Using Partial Transmit Sequence (PTS)');
xlabel('Modulation Scheme');
ylabel('PAPR (dB)');
legend('Original', 'After PTS');
grid on;


%(PAPR) Reduction Performance under Diverse Channel Conditions 

function papr_5g_analysis()
    %% 5G NR PAPR/BER Analysis Framework
    clc; clearvars; close all;
    rng(42);
    
    %% Parameters
    params = struct(...
        'N', 256, ...
        'num_frames', 1000, ...
        'mod_orders', [4, 16, 64, 256], ...
        'SNR_levels', struct('low',0:5:10, 'medium',12:3:18, 'high',20:5:30), ...
        'channel_models', {'Rayleigh', 'Rician'}, ...
        'rician_K', [1, 10], ...
        'papr_techniques', {'Clipping', 'SLM', 'PTS', 'ToneReservation'}, ...
        'clipping_ratio', 0.3, ...
        'slm_candidates', 8, ...
        'pts_subblocks', 8, ...
        'tr_tones', 0.1 ...
        );

    %% Main Simulation
    results = initialize_results(params);
    
    for mod_idx = 1:length(params.mod_orders)
        M = params.mod_orders(mod_idx);
        constellation = qam_modulation(M);
        
        for ch_idx = 1:length(params.channel_models)
            channel_type = params.channel_models{ch_idx};
            
            for papr_idx = 1:length(params.papr_techniques)
                technique = params.papr_techniques{papr_idx};
                
                fprintf('\nProcessing %s | %s | %s\n', ...
                    modulation_name(M), channel_type, technique);
                
                [ber, papr] = process_scenario(M, constellation, channel_type, technique, params);
                
                results(mod_idx, ch_idx, papr_idx) = struct(...
                    'ber', ber, 'papr', papr, ...
                    'modulation', modulation_name(M), ...
                    'channel', channel_type, 'technique', technique);
            end
        end
    end
    
    %% Visualization
    plot_results(results, params);
    fprintf('\n=== Simulation Complete ===\n');
end

%% Helper Functions
function results = initialize_results(params)
    results = repmat(struct('ber',[], 'papr',[], 'modulation','', 'channel','', 'technique',''), ...
        length(params.mod_orders), length(params.channel_models), length(params.papr_techniques));
end

function [ber, papr] = process_scenario(M, constellation, channel_type, technique, params)
    ber = struct('low',[], 'medium',[], 'high',[]);
    papr = struct('original',[], 'reduced',[]);
    
    data = randi([0, M-1], params.N, params.num_frames);
    x_mod = constellation(data + 1);
    x_time = ifft(x_mod, params.N, 1);
    
    [x_processed, papr] = apply_papr_technique(x_time, technique, params);
    
    for snr_field = fieldnames(params.SNR_levels)'
        snr_vals = params.SNR_levels.(snr_field{1});
        ber_vals = zeros(size(snr_vals));
        
        for snr_idx = 1:length(snr_vals)
            h = apply_channel(x_processed, channel_type, params);
            y_channel = x_processed .* h;
            y_noisy = add_awgn(y_channel, snr_vals(snr_idx), params);
            rx_freq = fft(y_noisy, params.N, 1) ./ h;
            data_rx = qam_demod(rx_freq(:), constellation);
            ber_vals(snr_idx) = sum(data(:) ~= data_rx) / numel(data);
        end
        ber.(snr_field{1}) = mean(ber_vals);
    end
end

function [x_processed, papr] = apply_papr_technique(x_time, technique, params)
    switch technique
        case 'Clipping'
            clip_thresh = params.clipping_ratio * rms(x_time(:));
            x_processed = min(abs(x_time), clip_thresh) .* exp(1j*angle(x_time));
            
        case 'SLM'
            phase_seq = exp(1j*2*pi*rand(params.N, params.slm_candidates));
            [~, best] = min(max(abs(ifft(fft(x_time).*phase_seq)).^2));
            x_processed = ifft(fft(x_time).*phase_seq(:,best));
            
        case 'PTS'
            subblk_size = params.N/params.pts_subblocks;
            phases = exp(1j*2*pi*rand(params.pts_subblocks,1));
            x_processed = zeros(size(x_time));
            for sb = 1:params.pts_subblocks
                idx = (sb-1)*subblk_size+1:sb*subblk_size;
                x_processed(idx) = x_time(idx) .* phases(sb);
            end
            
        case 'ToneReservation'
            N = params.N;
            reserved = randperm(N, round(N*params.tr_tones));
            X = fft(x_time);
            X(reserved) = 0;
            x_processed = ifft(X);
    end
    papr.original = calculate_papr(x_time);
    papr.reduced = calculate_papr(x_processed);
end

function h = apply_channel(x, channel_type, params)
    [rows, cols] = size(x);
    switch channel_type
        case 'Rayleigh'
            h = (randn(rows, cols) + 1j*randn(rows, cols))/sqrt(2);
        case 'Rician'
            K = params.rician_K(strcmp(params.channel_models, 'Rician'));
            h = sqrt(K/(K+1)) + sqrt(1/(K+1))*(randn(rows, cols) + 1j*randn(rows, cols))/sqrt(2);
    end
end

function plot_results(results, params)
    figure('Position', [100 100 1400 800], 'Color', 'w');
    
    % PAPR Plot
    subplot(2,1,1);
    tech_names = params.papr_techniques;
    mod_names = arrayfun(@(m) modulation_name(m), params.mod_orders, 'UniformOutput', false);
    papr_data = squeeze(mean(reshape([results.papr], size(results)), [2]));
    
    hold on;
    colors = lines(length(tech_names));
    for t = 1:length(tech_names)
        plot(papr_data(:,t), '-o', 'Color', colors(t,:), 'LineWidth', 2);
    end
    title('PAPR Performance');
    xlabel('Modulation Scheme'); ylabel('PAPR (dB)');
    set(gca, 'XTick', 1:length(mod_names), 'XTickLabel', mod_names);
    legend(tech_names, 'Location', 'northeastoutside');
    grid on;
    
    % BER Plot
    subplot(2,1,2);
    hold on;
    for t = 1:length(tech_names)
        ber_medium = mean([results(:,:,t).ber].medium, 2);
        plot(params.SNR_levels.medium, ber_medium, '-s', 'LineWidth', 2);
    end
    set(gca, 'YScale', 'log');
    title('BER at Medium SNR');
    xlabel('SNR (dB)'); ylabel('BER');
    legend(tech_names, 'Location', 'northeastoutside');
    grid on;
    ylim([1e-5 1]);
end

%% Utilities
function name = modulation_name(M)
    name = sprintf('%d-QAM', M);
    if M == 4, name = 'QPSK'; end
end

function constellation = qam_modulation(M)
    sqrtM = sqrt(M);
    re = repmat(linspace(-1,1,sqrtM), sqrtM, 1);
    im = flipud(re');
    constellation = complex(re(:), im(:));
    constellation = constellation / sqrt(mean(abs(constellation).^2));
end

function papr = calculate_papr(signal)
    papr_inst = 10*log10(max(abs(signal).^2,[],1) ./ mean(abs(signal).^2,1));
    papr = mean(papr_inst);
end

function y = add_awgn(x, snr_dB, ~)
    Es = mean(abs(x(:)).^2);
    N0 = Es / (10^(snr_dB/10));
    y = x + sqrt(N0/2)*(randn(size(x)) + 1j*randn(size(x)));
end

function data = qam_demod(symbols, constellation)
    [~, data] = min(abs(symbols - constellation.'), [], 2);
    data = data - 1;
end



%Power Amplifier Efficiency Analysis
clc; clear; close all;

% Parameters
N = 256;                    % Number of subcarriers
num_ofdm_symbols = 1000;    % Number of OFDM symbols
clip_level = 0.3;           % Clipping threshold
mod_orders = [4, 16, 64, 256]; % QPSK, 16-QAM, 64-QAM, 256-QAM
num_candidates = 4;         % SLM candidates
num_subblocks = 4;          % PTS subblocks
filter_order = 32;          % FIR filter order

% FIR filter design
b = fir1(filter_order, 0.2);

% Power Amplifier Parameters
pa_saturation_power = 1;  % Normalized saturation power
pa_p = 3;                 % Rapp Model Smoothness Factor

% Initialize results
PAPR_reduction = zeros(length(mod_orders), 4);
OBO = zeros(length(mod_orders), 4);
Efficiency = zeros(length(mod_orders), 4);
ACPR = zeros(length(mod_orders), 4);

for i = 1:length(mod_orders)
    M = mod_orders(i);
    data = randi([0, M-1], N, num_ofdm_symbols);
    x_mod = qammod(data, M, 'UnitAveragePower', true, 'InputType', 'integer');
    x_time = ifft(x_mod, N, 1);
    
    % PAPR Calculation (Original)
    PAPR_original = 10*log10(max(abs(x_time).^2, [], 1) ./ mean(abs(x_time).^2, 1));
    PAPR_original_avg = mean(PAPR_original);
    
    % Clipping & Filtering
    clip_amp = clip_level * sqrt(mean(abs(x_time(:)).^2));
    x_clipped = x_time;
    clip_idx = abs(x_clipped) > clip_amp;
    x_clipped(clip_idx) = clip_amp .* exp(1j * angle(x_clipped(clip_idx)));
    x_filtered = filter(b, 1, x_clipped, [], 1);
    PAPR_filtered = mean(10*log10(max(abs(x_filtered).^2, [], 1) ./ mean(abs(x_filtered).^2, 1)));
    
    % SLM Method
    min_PAPR_SLM = inf(1, num_ofdm_symbols);
    for k = 1:num_ofdm_symbols
        for j = 1:num_candidates
            phase_shift = exp(1j * 2*pi*rand(N, 1));
            x_mod_slm = x_mod(:, k) .* phase_shift;
            x_time_slm = ifft(x_mod_slm, N);
            min_PAPR_SLM(k) = min(min_PAPR_SLM(k), 10*log10(max(abs(x_time_slm).^2) / mean(abs(x_time_slm).^2)));
        end
    end
    PAPR_SLM = mean(min_PAPR_SLM);
    
    % PTS Method
    subblock_size = N / num_subblocks;
    min_PAPR_PTS = inf(1, num_ofdm_symbols);
    for k = 1:num_ofdm_symbols
        for p = 1:50
            phases = exp(1j * 2*pi*rand(num_subblocks, 1));
            x_pts = zeros(N, 1);
            for sb = 1:num_subblocks
                idx = (sb-1)*subblock_size + 1 : sb*subblock_size;
                x_pts(idx) = x_mod(idx, k) .* phases(sb);
            end
            x_time_pts = ifft(x_pts, N);
            min_PAPR_PTS(k) = min(min_PAPR_PTS(k), 10*log10(max(abs(x_time_pts).^2) / mean(abs(x_time_pts).^2)));
        end
    end
    PAPR_PTS = mean(min_PAPR_PTS);
    
    % Store PAPR reduction
    PAPR_reduction(i, :) = [PAPR_original_avg, PAPR_filtered, PAPR_SLM, PAPR_PTS];
    
    % Calculate Output Back-Off (OBO)
    OBO(i, :) = PAPR_reduction(i, :) - min(PAPR_reduction(i, :));
    
    % Calculate Power Amplifier Efficiency (using Rapp model for HPA)
    Efficiency(i, :) = 1 ./ (1 + 10.^(-OBO(i, :) / 10));
    
    % Adjacent Channel Power Ratio (ACPR) Calculation
    ACPR(i, :) = 10*log10(sum(abs(x_filtered).^2) / sum(abs(x_filtered - x_time).^2));
end

% Plot Efficiency vs PAPR Reduction
figure;
plot(mod_orders, Efficiency, '-o', 'LineWidth', 2);
title('Power Amplifier Efficiency vs PAPR Reduction');
xlabel('Modulation Scheme');
ylabel('Efficiency');
legend('Original', 'Clipping & Filtering', 'SLM', 'PTS');
grid on;

% Plot ACPR Analysis
figure;
plot(mod_orders, ACPR, '-s', 'LineWidth', 2);
title('Adjacent Channel Power Ratio (ACPR)');
xlabel('Modulation Scheme');
ylabel('ACPR (dB)');
legend('Original', 'Clipping & Filtering', 'SLM', 'PTS');
grid on;

% Save results for scientific documentation
save('PAPR_Efficiency_Results.mat', 'PAPR_reduction', 'OBO', 'Efficiency', 'ACPR');

% Display detailed numerical results
disp('Scientific Analysis Results:');
for i = 1:length(mod_orders)
    fprintf('Modulation: %d-QAM\n', mod_orders(i));
    fprintf('PAPR Reduction (dB): Original = %.2f, Clipping & Filtering = %.2f, SLM = %.2f, PTS = %.2f\n', ...
        PAPR_reduction(i, :));
    fprintf('OBO (dB): Original = %.2f, Clipping & Filtering = %.2f, SLM = %.2f, PTS = %.2f\n', OBO(i, :));
    fprintf('Efficiency: Original = %.2f, Clipping & Filtering = %.2f, SLM = %.2f, PTS = %.2f\n', Efficiency(i, :));
    fprintf('ACPR (dB): Original = %.2f, Clipping & Filtering = %.2f, SLM = %.2f, PTS = %.2f\n', ACPR(i, :));
    fprintf('----------------------------------------------------\n');
end

